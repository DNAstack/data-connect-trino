endpoint:
  health:
    enabled: true
    id: health
    sensitive: false

server:
  port: 8089

cors:
  urls: http://localhost:8089

oauth-client-factory:
  default-config:
    token-uri: http://localhost:8081/oauth/token
    client-id: data-connect-trino
    client-secret: dev-secret-never-use-in-prod

app:
  url: http://localhost:${server.port}
  service-info:
    id:
    name: "GA4GH Discovery Search API"
    description:
    documentation-url:
    contact-url:
    version:
  # Un-comment the following section of tables-registry if you would like to enable the flow of fetching the table schema from tables-registry
  # Get the staging secret corresponding to client-id from kubernetes or create your own if pointing to local wallet
  # tables-registry:
    # url: https://ga4gh-tables-registry.staging.dnastack.com
    # auth:
      # authentication-uri: https://wallet.staging.dnastack.com/oauth/token
      # client-id: data-connect-trino-public-client-credentials
      # client-secret: <kubernetes_secret>
      # audience: https://ga4gh-tables-registry.staging.dnastack.com
  indexing-service:
    enabled: true
    base-uri: http://localhost:8094
    oauth-client:
      scopes: ins:library:read
      resource: "${app.indexing-service.base-uri}/"
    publisher-catalog-name: publisher_data
  collection-service:
    enabled: true
    base-uri: http://localhost:8093
    oauth-client:
      scopes: collection_item:read
      resource: "${app.collection-service.base-uri}/"
    collections-catalog-name: collections
  query-cleanup:
    cron-interval: "*/10 * * ? * *" # Every 10 seconds
    timeout-in-seconds: 120
  query-job-cleanup:
    cron-interval: "0 0 1 * * ?" # Every day at 1am
    deletion-timeout-in-days: 7

trino:
  datasource:
    url: "http://localhost:8091"
    username: "data-connect-trino"
  results:
    default-page-size: 100
  hidden-catalogs: "system"

info:
  build:
    name: "Data Connect API"
    version: 1.0


logging:
  level:
    #com.dnastack.ga4gh.dataconnect.adapter.trino.TrinoHttpClient: DEBUG # logs queries when search fails
    #com.dnastack.ga4gh.dataconnect.adapter.trino.TrinoDataConnectAdapter: DEBUG
    #com.dnastack.ga4gh.dataconnect.client.collectionservice: DEBUG
    #com.dnastack.ga4gh.dataconnect.model.TableError: DEBUG
    #org.springframework.security: DEBUG # find out why tokens are rejected
    # Reduced the log messages produced by p6spy by default.
    p6spy: WARN

auditing:
  enabled: true
  service-client-id: data-connect-trino
  json-printer-style: dense_print

spring:
  application:
    name: data-connect-trino
  main:
    allow-circular-references: true
  jackson:
    default-property-inclusion: NON_NULL
  jpa:
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
    show-sql: true
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://127.0.0.1/dataconnecttrino
    username: dataconnecttrino
    password: dataconnecttrino
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
  zipkin:
    enabled: false

management:
  metrics:
    export:
      logging-monitor:
        enabled: true
      environment: local
      stackdriver:
        enabled: false
  endpoints:
    web.exposure.include: info, health

---

spring:
  config:
    activate:
      on-profile: default

app:
  # Sample Auth configuration - works with local Wallet, Gatekeeper, Trino (see README.md)
  auth:
    authorization-type: bearer
    access-evaluator: scope
    global-method-security:
      enabled: true

    token-issuers:
      - issuer-uri: http://localhost:8081
        jwk-set-uri: http://localhost:8081/oauth/jwks
        audiences: ["http://localhost:${server.port}"]

    trino-oauth-client:
      token-uri: http://localhost:8081/oauth/token
      client-id: data-connect-trino
      client-secret: dev-secret-never-use-in-prod
      audience: http://trino.local
---

spring:
  config:
    activate:
      on-profile: wallet-auth

app:
  auth:
    authorization-type: bearer
    access-evaluator: wallet
    global-method-security:
      enabled: true

    token-issuers:
      - issuer-uri: http://localhost:8081
        jwk-set-uri: http://localhost:8081/oauth/jwks
        audiences: ["http://localhost:${server.port}", "http://data-connect-trino.local"]

    trino-oauth-client:
      token-uri: http://localhost:8081/oauth/token
      client-id: data-connect-trino
      client-secret: dev-secret-never-use-in-prod
      audience: http://trino.local
---

spring:
  config:
    activate:
      on-profile: no-auth
  security:
    enabled: false
  liquibase:
    enabled: true
  datasource:
    continue-on-error: true
management:
  health:
    db:
      enabled=false:

app:
  auth:
    authorization-type: none
    global-method-security:
      enabled: false
---

spring:
  config:
    activate:
      on-profile: basic-auth

app:
  auth:
    authorization-type: basic
    global-method-security:
      enabled: false
---

spring:
  config:
    activate:
      on-profile: audit

auditing:
  enabled: true

---

spring:
  config:
    activate:
      on-profile: metrics-enabled

management:
  endpoints:
    web.exposure.include: info, health, prometheus

---

spring:
  config:
    activate:
      on-profile: cloud
  # for cloud deployments, we run the Liquibase migration as part of the deployment pipeline
  # which makes applications start in a more predictable amount of time and prevents lockout
  # in cases where the app was killed during DB upgrade.
  liquibase:
    enabled: false
